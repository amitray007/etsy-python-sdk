# GitHub CI build pipeline with automatic versioning
name: Etsy Package Build and Publish

on:
  push:
    branches:
      - master
  workflow_dispatch:
    inputs:
      version_bump:
        description: 'Version bump type'
        required: true
        default: 'auto'
        type: choice
        options:
          - auto
          - patch
          - minor
          - major

jobs:
  check-skip:
    runs-on: ubuntu-latest
    outputs:
      should_skip: ${{ steps.check.outputs.should_skip }}
    permissions:
      contents: read
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 1
      
      - name: Check for skip CI directive
        id: check
        run: |
          # Get the commit message
          COMMIT_MSG=$(git log -1 --pretty=%B)
          echo "Commit message: $COMMIT_MSG"
          
          # Check for skip ci patterns (case insensitive)
          if echo "$COMMIT_MSG" | grep -qiE '\[skip ci\]|\[ci skip\]|skip ci|ci skip|\[no ci\]|no ci|\[skip-ci\]|skip-ci'; then
            echo "Found skip CI directive in commit message"
            echo "should_skip=true" >> $GITHUB_OUTPUT
          else
            echo "No skip CI directive found"
            echo "should_skip=false" >> $GITHUB_OUTPUT
          fi

  version-bump:
    needs: check-skip
    if: needs.check-skip.outputs.should_skip != 'true'
    runs-on: ubuntu-latest
    outputs:
      new_version: ${{ steps.bump.outputs.new_version }}
    permissions:
      contents: write
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}
          ref: ${{ github.ref }}
      
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.8'
      
      - name: Configure Git
        run: |
          git config --local user.email "github-actions[bot]@users.noreply.github.com"
          git config --local user.name "github-actions[bot]"
          
          # Ensure we're on the master branch
          if [ "${{ github.ref }}" = "refs/heads/master" ]; then
            echo "Already on master branch"
          else
            echo "Checking out master branch"
            git checkout master || git checkout -b master origin/master
          fi
          
          # Pull latest changes to avoid conflicts
          git fetch origin master
          
          # Check if we're behind
          LOCAL=$(git rev-parse HEAD)
          REMOTE=$(git rev-parse origin/master)
          if [ "$LOCAL" != "$REMOTE" ]; then
            echo "Local branch is behind remote, pulling latest changes..."
            git pull origin master --rebase
          else
            echo "Local branch is up to date with remote"
          fi
      
      - name: Determine version bump type
        id: determine_bump
        run: |
          if [ "${{ github.event_name }}" == "workflow_dispatch" ]; then
            BUMP_TYPE="${{ github.event.inputs.version_bump }}"
          else
            # Auto-detect from commit message
            COMMIT_MSG=$(git log -1 --pretty=%s)
            echo "Latest commit: $COMMIT_MSG"
            
            if echo "$COMMIT_MSG" | grep -qiE "breaking[ -]change|^breaking:"; then
              BUMP_TYPE="major"
            elif echo "$COMMIT_MSG" | grep -qiE "^feat:|feature"; then
              BUMP_TYPE="minor"
            else
              BUMP_TYPE="patch"
            fi
          fi
          
          echo "bump_type=$BUMP_TYPE" >> $GITHUB_OUTPUT
          echo "Version bump type: $BUMP_TYPE"
      
      - name: Bump version
        id: bump
        run: |
          # First, fetch the latest tags to ensure we have current state
          git fetch --tags
          
          # Get the current version before bump
          OLD_VERSION=$(python -c "from etsy_python._version import __version__; print(__version__)")
          echo "Current version: $OLD_VERSION"
          
          # Run the bump version script
          if [ "${{ steps.determine_bump.outputs.bump_type }}" == "auto" ]; then
            python scripts/bump_version.py --type auto
          else
            python scripts/bump_version.py --type ${{ steps.determine_bump.outputs.bump_type }}
          fi
          
          # Read the new version
          NEW_VERSION=$(python -c "from etsy_python._version import __version__; print(__version__)")
          echo "new_version=$NEW_VERSION" >> $GITHUB_OUTPUT
          echo "New version: $NEW_VERSION"
          
          # Verify the version actually changed
          if [ "$OLD_VERSION" == "$NEW_VERSION" ]; then
            echo "WARNING: Version did not change! This might indicate an issue with the bump script."
          fi
          
          # Check if this version tag already exists
          if git tag -l "v$NEW_VERSION" | grep -q "v$NEW_VERSION"; then
            echo "ERROR: Version v$NEW_VERSION already exists as a tag!"
            echo "This should not happen - the bump script should have incremented the version."
            exit 1
          fi
      
      - name: Commit version bump
        run: |
          git add etsy_python/_version.py
          # Always skip CI for version bump commits to prevent infinite loops
          git commit -m "chore: bump version to ${{ steps.bump.outputs.new_version }} [skip ci]"
          
      - name: Create version tag
        run: |
          TAG_NAME="v${{ steps.bump.outputs.new_version }}"
          
          # Check if tag already exists locally
          if git rev-parse "$TAG_NAME" >/dev/null 2>&1; then
            echo "ERROR: Tag $TAG_NAME already exists locally!"
            echo "This likely means version ${{ steps.bump.outputs.new_version }} has already been released."
            echo "Please check the version and resolve the conflict manually."
            exit 1
          fi
          
          # Check if tag exists on remote
          if git ls-remote --tags origin | grep -q "refs/tags/$TAG_NAME"; then
            echo "ERROR: Tag $TAG_NAME already exists on remote!"
            echo "This version has already been released."
            echo "The version bump logic may need adjustment."
            exit 1
          fi
          
          # Create new tag
          echo "Creating tag $TAG_NAME"
          git tag -a "$TAG_NAME" -m "Release version ${{ steps.bump.outputs.new_version }}"
      
      - name: Push changes
        run: |
          # Push to master branch using explicit refs to avoid any ambiguity
          echo "Pushing version bump to master branch..."
          if ! git push origin HEAD:refs/heads/master; then
            echo "ERROR: Failed to push to master branch"
            echo "This might be due to:"
            echo "  - Protected branch settings"
            echo "  - Concurrent pushes from another workflow"
            echo "  - Network issues"
            exit 1
          fi
          
          # Push the specific tag we just created
          echo "Pushing tag v${{ steps.bump.outputs.new_version }}..."
          if ! git push origin "refs/tags/v${{ steps.bump.outputs.new_version }}"; then
            echo "ERROR: Failed to push tag"
            echo "The tag might already exist on the remote."
            echo "Please check if this version was already released."
            exit 1
          fi
          
          echo "Successfully pushed version ${{ steps.bump.outputs.new_version }} to master and created release tag"

  build:
    needs: [check-skip, version-bump]
    if: needs.check-skip.outputs.should_skip != 'true'
    runs-on: ubuntu-latest
    permissions:
      contents: read
    steps:
      - uses: actions/checkout@v4
        with:
          ref: master
          fetch-depth: 0
      
      - name: Pull latest changes
        run: |
          git pull origin master
      
      - name: Set up Python 3.8
        uses: actions/setup-python@v4
        with:
          python-version: '3.8'
      
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          python -m pip install build wheel
          if [ -f etsy_python/requirements.txt ]; then pip install -r etsy_python/requirements.txt; fi
      
      - name: Build package
        run: |
          python -m build
          echo "Built version ${{ needs.version-bump.outputs.new_version }}"
      
      - name: Archive package
        uses: actions/upload-artifact@v4
        with:
          name: etsy-python-dist
          path: ./dist/

  publish-to-pypi:
    name: Publish Python üêç distribution üì¶ to PyPI
    needs: [check-skip, version-bump, build]
    if: needs.check-skip.outputs.should_skip != 'true'
    runs-on: ubuntu-latest
    environment:
      name: pypi
      url: https://pypi.org/p/etsy-python
    permissions:
      id-token: write
    steps:
      - name: Download all the dists
        uses: actions/download-artifact@v4
        with:
          name: etsy-python-dist
          path: ./dist/
      
      - name: Publish distribution üì¶ to PyPI
        uses: pypa/gh-action-pypi-publish@release/v1
        with:
          print-hash: true
          skip-existing: true

  create-release:
    name: Create GitHub Release
    needs: [check-skip, version-bump, publish-to-pypi]
    if: needs.check-skip.outputs.should_skip != 'true'
    runs-on: ubuntu-latest
    permissions:
      contents: write
    steps:
      - uses: actions/checkout@v4
        with:
          ref: master
          fetch-depth: 0
      
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.8'
      
      - name: Download artifacts
        uses: actions/download-artifact@v4
        with:
          name: etsy-python-dist
          path: ./dist/
      
      - name: Generate release notes
        id: release_notes
        run: |
          VERSION="${{ needs.version-bump.outputs.new_version }}"
          
          # Use the Python script to generate detailed release notes
          python scripts/generate_release_notes.py "$VERSION" --output release_notes.md
          
          echo "Release notes generated successfully"
          echo "=== Release Notes Preview ==="
          cat release_notes.md
      
      - name: Create GitHub Release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: v${{ needs.version-bump.outputs.new_version }}
          name: v${{ needs.version-bump.outputs.new_version }}
          body_path: release_notes.md
          files: dist/*
          draft: false
          prerelease: false